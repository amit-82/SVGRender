"use strict";

var _input_validations = require("./input_validations");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe("Test valueAssigned", function () {
  test("should return true for string, number, boolean, object", function () {
    expect((0, _input_validations.valueAssigned)(1)).toBeTruthy();
    expect((0, _input_validations.valueAssigned)("xxx")).toBeTruthy();
    expect((0, _input_validations.valueAssigned)("")).toBeTruthy();
    expect((0, _input_validations.valueAssigned)(true)).toBeTruthy();
    expect((0, _input_validations.valueAssigned)(false)).toBeTruthy();
    expect((0, _input_validations.valueAssigned)({
      x: 6
    })).toBeTruthy();
    expect((0, _input_validations.valueAssigned)({})).toBeTruthy();
  });
  test("should return false for undefined", function () {
    expect((0, _input_validations.valueAssigned)(null)).toBeFalsy();
    expect((0, _input_validations.valueAssigned)(undefined)).toBeFalsy();
  });
});
describe("Test allValuesAssigned", function () {
  test("should return true", function () {
    expect((0, _input_validations.allValuesAssigned)(1, "x", {})).toBeTruthy();
  });
  test("should return false", function () {
    expect((0, _input_validations.allValuesAssigned)(1, null, {})).toBeFalsy();
    expect((0, _input_validations.allValuesAssigned)(1, "x", undefined)).toBeFalsy();
    expect((0, _input_validations.allValuesAssigned)(undefined, "x", {})).toBeFalsy();
  });
  test("should return true for no args", function () {
    expect((0, _input_validations.allValuesAssigned)()).toBeTruthy();
  });
  test("should return true for single empty array", function () {
    expect((0, _input_validations.allValuesAssigned)([])).toBeTruthy();
  });
});
describe("Test allArrayMembersAssigned", function () {
  test("should return true for empty array", function () {
    expect((0, _input_validations.allArrayMembersAssigned)([])).toBeTruthy();
  });
  test("should return true for array with assigned members", function () {
    expect((0, _input_validations.allArrayMembersAssigned)([1, "x", true, false, {}, []])).toBeTruthy();
  });
  test("should return false for array with undefined or null", function () {
    expect((0, _input_validations.allArrayMembersAssigned)([1, "x", true, false, undefined, []])).toBeFalsy();
    expect((0, _input_validations.allArrayMembersAssigned)([1, "x", true, false, null, []])).toBeFalsy();
  });
});
describe("Test isEmpty", function () {
  test("should return false for not empty values", function () {
    expect((0, _input_validations.isEmpty)(1)).toBeFalsy();
    expect((0, _input_validations.isEmpty)("brown fox")).toBeFalsy();
    expect((0, _input_validations.isEmpty)(" ")).toBeFalsy();
    expect((0, _input_validations.isEmpty)([1, 2, "x"])).toBeFalsy();
    expect((0, _input_validations.isEmpty)({
      x: "x"
    })).toBeFalsy();
  });
  test("should return false for a symbol", function () {
    expect((0, _input_validations.isEmpty)(Symbol())).toBeFalsy();
  });
  test("should return true for object with only a symbol member(s)", function () {
    expect((0, _input_validations.isEmpty)(_defineProperty({}, Symbol(), "some symbol"))).toBeTruthy();
  });
  test("should return true for empty Array, Object string, NaN, null and undefined", function () {
    expect((0, _input_validations.isEmpty)([])).toBeTruthy();
    expect((0, _input_validations.isEmpty)({})).toBeTruthy();
    expect((0, _input_validations.isEmpty)("")).toBeTruthy();
    expect((0, _input_validations.isEmpty)(NaN)).toBeTruthy();
    expect((0, _input_validations.isEmpty)(null)).toBeTruthy();
    expect((0, _input_validations.isEmpty)(undefined)).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,