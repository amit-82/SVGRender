"use strict";

var _createSVGElement = _interopRequireDefault(require("./createSVGElement"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe("Test createSVGElement", function () {
  test("should create a SVGEllipseElement", function () {
    var elem = (0, _createSVGElement["default"])("ellipse");
    expect(elem.nodeName).toBe("ellipse");
  });
  test("should create a SVGLineElement", function () {
    var elem = (0, _createSVGElement["default"])("line");
    expect(elem.nodeName).toBe("line");
  });
  test("should create a SVGPolygonElement", function () {
    var elem = (0, _createSVGElement["default"])("polygon");
    expect(elem.nodeName).toBe("polygon");
  });
  test("should create a SVGPolylineElement", function () {
    var elem = (0, _createSVGElement["default"])("polyline");
    expect(elem.nodeName).toBe("polyline");
  });
  test("should create a SVGRectElement", function () {
    var elem = (0, _createSVGElement["default"])("rect");
    expect(elem.nodeName).toBe("rect");
  });
  test("should create a SVGPath element with id 'pathId' and default nodeName 'path' without a parent", function () {
    var elem = (0, _createSVGElement["default"])("path", null, "pathId");
    expect(elem.nodeName).toBe("path");
    expect(elem.id).toBe("pathId");
  });
  test("should create a SVGPath element with className 'my-svg your-svg' and nodeName 'circle'", function () {
    var elem = (0, _createSVGElement["default"])("circle", null, null, "my-svg your-svg");
    expect(elem.nodeName).toBe("circle");
    expect(elem.getAttribute("class")).toBe("my-svg your-svg");
  });
  test("should create a SVGElement and append to it a SVGPath element", function () {
    var parent = (0, _createSVGElement["default"])("svg", null, null, "svg");
    expect(parent.children.length).toBe(0);
    (0, _createSVGElement["default"])("path", parent, "pathId");
    expect(parent.children.length).toBe(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVTVkdFbGVtZW50LnRlc3QudHMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZWxlbSIsImV4cGVjdCIsIm5vZGVOYW1lIiwidG9CZSIsImlkIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50IiwiY2hpbGRyZW4iLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFFQUEsUUFBUSxDQUFDLHVCQUFELEVBQTBCLFlBQU07QUFDdkNDLEVBQUFBLElBQUksQ0FBQyxtQ0FBRCxFQUFzQyxZQUFNO0FBQy9DLFFBQU1DLElBQUksR0FBRyxrQ0FBaUIsU0FBakIsQ0FBYjtBQUNBQyxJQUFBQSxNQUFNLENBQUNELElBQUksQ0FBQ0UsUUFBTixDQUFOLENBQXNCQyxJQUF0QixDQUEyQixTQUEzQjtBQUNBLEdBSEcsQ0FBSjtBQUtBSixFQUFBQSxJQUFJLENBQUMsZ0NBQUQsRUFBbUMsWUFBTTtBQUM1QyxRQUFNQyxJQUFJLEdBQUcsa0NBQWlCLE1BQWpCLENBQWI7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRCxJQUFJLENBQUNFLFFBQU4sQ0FBTixDQUFzQkMsSUFBdEIsQ0FBMkIsTUFBM0I7QUFDQSxHQUhHLENBQUo7QUFLQUosRUFBQUEsSUFBSSxDQUFDLG1DQUFELEVBQXNDLFlBQU07QUFDL0MsUUFBTUMsSUFBSSxHQUFHLGtDQUFpQixTQUFqQixDQUFiO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDRSxRQUFOLENBQU4sQ0FBc0JDLElBQXRCLENBQTJCLFNBQTNCO0FBQ0EsR0FIRyxDQUFKO0FBS0FKLEVBQUFBLElBQUksQ0FBQyxvQ0FBRCxFQUF1QyxZQUFNO0FBQ2hELFFBQU1DLElBQUksR0FBRyxrQ0FBaUIsVUFBakIsQ0FBYjtBQUNBQyxJQUFBQSxNQUFNLENBQUNELElBQUksQ0FBQ0UsUUFBTixDQUFOLENBQXNCQyxJQUF0QixDQUEyQixVQUEzQjtBQUNBLEdBSEcsQ0FBSjtBQUtBSixFQUFBQSxJQUFJLENBQUMsZ0NBQUQsRUFBbUMsWUFBTTtBQUM1QyxRQUFNQyxJQUFJLEdBQUcsa0NBQWlCLE1BQWpCLENBQWI7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRCxJQUFJLENBQUNFLFFBQU4sQ0FBTixDQUFzQkMsSUFBdEIsQ0FBMkIsTUFBM0I7QUFDQSxHQUhHLENBQUo7QUFLQUosRUFBQUEsSUFBSSxDQUFDLCtGQUFELEVBQWtHLFlBQU07QUFDM0csUUFBTUMsSUFBSSxHQUFHLGtDQUFpQixNQUFqQixFQUF5QixJQUF6QixFQUErQixRQUEvQixDQUFiO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDRSxRQUFOLENBQU4sQ0FBc0JDLElBQXRCLENBQTJCLE1BQTNCO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDSSxFQUFOLENBQU4sQ0FBZ0JELElBQWhCLENBQXFCLFFBQXJCO0FBQ0EsR0FKRyxDQUFKO0FBTUFKLEVBQUFBLElBQUksQ0FBQyx3RkFBRCxFQUEyRixZQUFNO0FBQ3BHLFFBQU1DLElBQUksR0FBRyxrQ0FBaUIsUUFBakIsRUFBMkIsSUFBM0IsRUFBaUMsSUFBakMsRUFBdUMsaUJBQXZDLENBQWI7QUFDQUMsSUFBQUEsTUFBTSxDQUFDRCxJQUFJLENBQUNFLFFBQU4sQ0FBTixDQUFzQkMsSUFBdEIsQ0FBMkIsUUFBM0I7QUFDQUYsSUFBQUEsTUFBTSxDQUFDRCxJQUFJLENBQUNLLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBRCxDQUFOLENBQW1DRixJQUFuQyxDQUF3QyxpQkFBeEM7QUFDQSxHQUpHLENBQUo7QUFNQUosRUFBQUEsSUFBSSxDQUFDLCtEQUFELEVBQWtFLFlBQU07QUFDM0UsUUFBTU8sTUFBTSxHQUFHLGtDQUFpQixLQUFqQixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxLQUFwQyxDQUFmO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ0ssTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxNQUFqQixDQUFOLENBQStCTCxJQUEvQixDQUFvQyxDQUFwQztBQUVBLHNDQUFpQixNQUFqQixFQUF5QkcsTUFBekIsRUFBaUMsUUFBakM7QUFDQUwsSUFBQUEsTUFBTSxDQUFDSyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JDLE1BQWpCLENBQU4sQ0FBK0JMLElBQS9CLENBQW9DLENBQXBDO0FBQ0EsR0FORyxDQUFKO0FBT0EsQ0E3Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVTVkdFbGVtZW50IGZyb20gXCIuL2NyZWF0ZVNWR0VsZW1lbnRcIjtcclxuXHJcbmRlc2NyaWJlKFwiVGVzdCBjcmVhdGVTVkdFbGVtZW50XCIsICgpID0+IHtcclxuXHR0ZXN0KFwic2hvdWxkIGNyZWF0ZSBhIFNWR0VsbGlwc2VFbGVtZW50XCIsICgpID0+IHtcclxuXHRcdGNvbnN0IGVsZW0gPSBjcmVhdGVTVkdFbGVtZW50KFwiZWxsaXBzZVwiKTtcclxuXHRcdGV4cGVjdChlbGVtLm5vZGVOYW1lKS50b0JlKFwiZWxsaXBzZVwiKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjcmVhdGUgYSBTVkdMaW5lRWxlbWVudFwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBlbGVtID0gY3JlYXRlU1ZHRWxlbWVudChcImxpbmVcIik7XHJcblx0XHRleHBlY3QoZWxlbS5ub2RlTmFtZSkudG9CZShcImxpbmVcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgY3JlYXRlIGEgU1ZHUG9seWdvbkVsZW1lbnRcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgZWxlbSA9IGNyZWF0ZVNWR0VsZW1lbnQoXCJwb2x5Z29uXCIpO1xyXG5cdFx0ZXhwZWN0KGVsZW0ubm9kZU5hbWUpLnRvQmUoXCJwb2x5Z29uXCIpO1xyXG5cdH0pO1xyXG5cclxuXHR0ZXN0KFwic2hvdWxkIGNyZWF0ZSBhIFNWR1BvbHlsaW5lRWxlbWVudFwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBlbGVtID0gY3JlYXRlU1ZHRWxlbWVudChcInBvbHlsaW5lXCIpO1xyXG5cdFx0ZXhwZWN0KGVsZW0ubm9kZU5hbWUpLnRvQmUoXCJwb2x5bGluZVwiKTtcclxuXHR9KTtcclxuXHJcblx0dGVzdChcInNob3VsZCBjcmVhdGUgYSBTVkdSZWN0RWxlbWVudFwiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBlbGVtID0gY3JlYXRlU1ZHRWxlbWVudChcInJlY3RcIik7XHJcblx0XHRleHBlY3QoZWxlbS5ub2RlTmFtZSkudG9CZShcInJlY3RcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgY3JlYXRlIGEgU1ZHUGF0aCBlbGVtZW50IHdpdGggaWQgJ3BhdGhJZCcgYW5kIGRlZmF1bHQgbm9kZU5hbWUgJ3BhdGgnIHdpdGhvdXQgYSBwYXJlbnRcIiwgKCkgPT4ge1xyXG5cdFx0Y29uc3QgZWxlbSA9IGNyZWF0ZVNWR0VsZW1lbnQoXCJwYXRoXCIsIG51bGwsIFwicGF0aElkXCIpO1xyXG5cdFx0ZXhwZWN0KGVsZW0ubm9kZU5hbWUpLnRvQmUoXCJwYXRoXCIpO1xyXG5cdFx0ZXhwZWN0KGVsZW0uaWQpLnRvQmUoXCJwYXRoSWRcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgY3JlYXRlIGEgU1ZHUGF0aCBlbGVtZW50IHdpdGggY2xhc3NOYW1lICdteS1zdmcgeW91ci1zdmcnIGFuZCBub2RlTmFtZSAnY2lyY2xlJ1wiLCAoKSA9PiB7XHJcblx0XHRjb25zdCBlbGVtID0gY3JlYXRlU1ZHRWxlbWVudChcImNpcmNsZVwiLCBudWxsLCBudWxsLCBcIm15LXN2ZyB5b3VyLXN2Z1wiKTtcclxuXHRcdGV4cGVjdChlbGVtLm5vZGVOYW1lKS50b0JlKFwiY2lyY2xlXCIpO1xyXG5cdFx0ZXhwZWN0KGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikpLnRvQmUoXCJteS1zdmcgeW91ci1zdmdcIik7XHJcblx0fSk7XHJcblxyXG5cdHRlc3QoXCJzaG91bGQgY3JlYXRlIGEgU1ZHRWxlbWVudCBhbmQgYXBwZW5kIHRvIGl0IGEgU1ZHUGF0aCBlbGVtZW50XCIsICgpID0+IHtcclxuXHRcdGNvbnN0IHBhcmVudCA9IGNyZWF0ZVNWR0VsZW1lbnQoXCJzdmdcIiwgbnVsbCwgbnVsbCwgXCJzdmdcIik7XHJcblx0XHRleHBlY3QocGFyZW50LmNoaWxkcmVuLmxlbmd0aCkudG9CZSgwKTtcclxuXHJcblx0XHRjcmVhdGVTVkdFbGVtZW50KFwicGF0aFwiLCBwYXJlbnQsIFwicGF0aElkXCIpO1xyXG5cdFx0ZXhwZWN0KHBhcmVudC5jaGlsZHJlbi5sZW5ndGgpLnRvQmUoMSk7XHJcblx0fSk7XHJcbn0pO1xyXG4iXX0=